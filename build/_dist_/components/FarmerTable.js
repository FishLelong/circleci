/* src/components/FarmerTable.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import {
	getTokenImage,
	formatFiat,
	calculateAPRBalancer,
	calculateAPRUniswap
} from "./helpers.js";

import { farming } from "../stores/eth/writables.js";
import { _ } from "../../web_modules/svelte-i18n.js";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (178:10) {#each pool.containing as coins}
function create_each_block_1(ctx) {
	let t0;
	let t1_value = /*coins*/ ctx[6].symbol + "";
	let t1;
	let t2;

	return {
		c() {
			t0 = text("(");
			t1 = text(t1_value);
			t2 = text(")\n              ¬†");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tokensSwapOut*/ 1 && t1_value !== (t1_value = /*coins*/ ctx[6].symbol + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (189:10) {#if pool.type === 'UniswapV2'}
function create_if_block_6(ctx) {
	let t;

	return {
		c() {
			t = text("ü¶Ñ Uniswap V2");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (192:10) {#if pool.type === 'Balancer'}
function create_if_block_5(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "‚öñÔ∏è Balancer";
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (211:10) {:else}
function create_else_block_2(ctx) {
	let t;

	return {
		c() {
			t = text("n/a");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (209:10) {#if pool.contractType === 'Geyser'}
function create_if_block_4(ctx) {
	let t_value = /*$_*/ ctx[1]("farmertable.see.stake.page") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$_*/ 2 && t_value !== (t_value = /*$_*/ ctx[1]("farmertable.see.stake.page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (206:8) {#if $farming[pool.addressUniPoll] && $farming[pool.addressUniPoll].apr}
function create_if_block_3(ctx) {
	let t_value = /*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll].apr + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$farming, tokensSwapOut*/ 5 && t_value !== (t_value = /*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll].apr + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (220:8) {:else}
function create_else_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("n/a");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (218:8) {#if $farming[pool.addressUniPoll]}
function create_if_block_2(ctx) {
	let t_value = formatFiat(/*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll].totalLiquidity.toFixed(2)) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$farming, tokensSwapOut*/ 5 && t_value !== (t_value = formatFiat(/*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll].totalLiquidity.toFixed(2)) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (231:10) {:else}
function create_else_block(ctx) {
	let button;
	let t_value = /*$_*/ ctx[1]("general.stake") + "";
	let t;

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "table-btn highlight-box min-w-70px");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$_*/ 2 && t_value !== (t_value = /*$_*/ ctx[1]("general.stake") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (227:10) {#if pool.deprecated}
function create_if_block_1(ctx) {
	let button;
	let t_value = /*$_*/ ctx[1]("general.unstake") + "";
	let t;

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "table-btn min-w-70px");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$_*/ 2 && t_value !== (t_value = /*$_*/ ctx[1]("general.unstake") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (239:6) {#if pool.poolLink}
function create_if_block(ctx) {
	let div;
	let a;
	let button;
	let t_value = /*$_*/ ctx[1]("farmertable.add.to.pool") + "";
	let t;
	let a_href_value;

	return {
		c() {
			div = element("div");
			a = element("a");
			button = element("button");
			t = text(t_value);
			attr(button, "class", "table-btn min-w-70px");
			attr(a, "href", a_href_value = `${/*pool*/ ctx[3].poolLink}`);
			attr(a, "target", "_blank");
			attr(div, "class", "ext-center px-1pc w-8pc");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, button);
			append(button, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$_*/ 2 && t_value !== (t_value = /*$_*/ ctx[1]("farmertable.add.to.pool") + "")) set_data(t, t_value);

			if (dirty & /*tokensSwapOut*/ 1 && a_href_value !== (a_href_value = `${/*pool*/ ctx[3].poolLink}`)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (173:2) {#each tokensSwapOut as pool}
function create_each_block(ctx) {
	let div7;
	let div0;
	let t0;
	let div1;
	let t1;
	let t2;
	let div2;
	let t3_value = /*pool*/ ctx[3].weights + "";
	let t3;
	let t4;
	let div3;
	let t5_value = /*pool*/ ctx[3].weeklyRewards + "";
	let t5;
	let t6;
	let div4;
	let t7;
	let div5;
	let t8;
	let div6;
	let a;
	let t9;
	let t10;
	let each_value_1 = /*pool*/ ctx[3].containing;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block0 = /*pool*/ ctx[3].type === "UniswapV2" && create_if_block_6(ctx);
	let if_block1 = /*pool*/ ctx[3].type === "Balancer" && create_if_block_5(ctx);

	function select_block_type(ctx, dirty) {
		if (/*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll] && /*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll].apr) return create_if_block_3;
		if (/*pool*/ ctx[3].contractType === "Geyser") return create_if_block_4;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block2 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*$farming*/ ctx[2][/*pool*/ ctx[3].addressUniPoll]) return create_if_block_2;
		return create_else_block_1;
	}

	let current_block_type_1 = select_block_type_1(ctx, -1);
	let if_block3 = current_block_type_1(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*pool*/ ctx[3].deprecated) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type_2 = select_block_type_2(ctx, -1);
	let if_block4 = current_block_type_2(ctx);
	let if_block5 = /*pool*/ ctx[3].poolLink && create_if_block(ctx);

	return {
		c() {
			div7 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div1 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			div2 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");
			t5 = text(t5_value);
			t6 = space();
			div4 = element("div");
			if_block2.c();
			t7 = space();
			div5 = element("div");
			if_block3.c();
			t8 = space();
			div6 = element("div");
			a = element("a");
			if_block4.c();
			t9 = space();
			if (if_block5) if_block5.c();
			t10 = space();
			attr(div0, "class", "text-center px-1pc thinborderight items-stretch md:block w-16pc");
			attr(div1, "class", "text-center px-1pc thinborderight block w-14pc md:block");
			attr(div2, "class", "text-center px-1pc thinborderight w-8pc");
			attr(div3, "class", "text-center px-1pc thinborderight w-8pc");
			attr(div4, "class", "text-center px-1pc thinborderight w-14pc");
			attr(div5, "class", "text-center px-1pc thinborderight w-14pc");
			attr(a, "href", "#/stake");
			attr(div6, "class", "text-center thinborderight w-8pc px-1pc");
			attr(div7, "class", "flex w-100pc min-w-1100px min-h-50px justify-around items-center py-3 negativetop thinborder");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div7, t0);
			append(div7, div1);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			append(div7, t2);
			append(div7, div2);
			append(div2, t3);
			append(div7, t4);
			append(div7, div3);
			append(div3, t5);
			append(div7, t6);
			append(div7, div4);
			if_block2.m(div4, null);
			append(div7, t7);
			append(div7, div5);
			if_block3.m(div5, null);
			append(div7, t8);
			append(div7, div6);
			append(div6, a);
			if_block4.m(a, null);
			append(div7, t9);
			if (if_block5) if_block5.m(div7, null);
			append(div7, t10);
		},
		p(ctx, dirty) {
			if (dirty & /*tokensSwapOut*/ 1) {
				each_value_1 = /*pool*/ ctx[3].containing;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*pool*/ ctx[3].type === "UniswapV2") {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*pool*/ ctx[3].type === "Balancer") {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*tokensSwapOut*/ 1 && t3_value !== (t3_value = /*pool*/ ctx[3].weights + "")) set_data(t3, t3_value);
			if (dirty & /*tokensSwapOut*/ 1 && t5_value !== (t5_value = /*pool*/ ctx[3].weeklyRewards + "")) set_data(t5, t5_value);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div4, null);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx, dirty)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_1(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(div5, null);
				}
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx, dirty)) && if_block4) {
				if_block4.p(ctx, dirty);
			} else {
				if_block4.d(1);
				if_block4 = current_block_type_2(ctx);

				if (if_block4) {
					if_block4.c();
					if_block4.m(a, null);
				}
			}

			if (/*pool*/ ctx[3].poolLink) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block(ctx);
					if_block5.c();
					if_block5.m(div7, t10);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div7);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if_block2.d();
			if_block3.d();
			if_block4.d();
			if (if_block5) if_block5.d();
		}
	};
}

function create_fragment(ctx) {
	let div10;
	let div9;
	let div8;
	let div0;
	let t0_value = /*$_*/ ctx[1]("farmertable.asset.name") + "";
	let t0;
	let t1;
	let div1;
	let t2_value = /*$_*/ ctx[1]("farmertable.dex") + "";
	let t2;
	let t3;
	let div2;
	let t4_value = /*$_*/ ctx[1]("farmertable.weights") + "";
	let t4;
	let t5;
	let div3;
	let t6_value = /*$_*/ ctx[1]("farmertable.w.rewards") + "";
	let t6;
	let t7;
	let div4;
	let t8_value = /*$_*/ ctx[1]("farmertable.apr.unstable") + "";
	let t8;
	let t9;
	let div5;
	let t10_value = /*$_*/ ctx[1]("farmertable.liquidity") + "";
	let t10;
	let t11;
	let div6;
	let t12;
	let div7;
	let t13;
	let each_value = /*tokensSwapOut*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div10 = element("div");
			div9 = element("div");
			div8 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			t4 = text(t4_value);
			t5 = space();
			div3 = element("div");
			t6 = text(t6_value);
			t7 = space();
			div4 = element("div");
			t8 = text(t8_value);
			t9 = space();
			div5 = element("div");
			t10 = text(t10_value);
			t11 = space();
			div6 = element("div");
			t12 = space();
			div7 = element("div");
			t13 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "font-thin text-left px-1pc items-stretch md:block w-16pc");
			attr(div1, "class", "font-thin text-center px-1pc block w-14pc md:block");
			attr(div2, "class", "font-thin text-center px-1pc w-8pc");
			attr(div3, "class", "font-thin text-center px-1pc w-8pc");
			attr(div4, "class", "font-thin text-center px-1pc w-14pc");
			attr(div5, "class", "font-thin text-center px-1pc w-14pc");
			attr(div6, "class", "font-thin text-center w-8pc px-1pc");
			attr(div7, "class", "font-thin ext-center px-1pc w-8pc");
			attr(div8, "class", "flex w-100pc min-w-1100px min-h-50px justify-around items-center py-1 mb-2 negativetop");
			attr(div9, "class", "flex flex-col w-100pc breakdown-table pt-2px");
			attr(div10, "class", "content flex flex-col spl");
		},
		m(target, anchor) {
			insert(target, div10, anchor);
			append(div10, div9);
			append(div9, div8);
			append(div8, div0);
			append(div0, t0);
			append(div8, t1);
			append(div8, div1);
			append(div1, t2);
			append(div8, t3);
			append(div8, div2);
			append(div2, t4);
			append(div8, t5);
			append(div8, div3);
			append(div3, t6);
			append(div8, t7);
			append(div8, div4);
			append(div4, t8);
			append(div8, t9);
			append(div8, div5);
			append(div5, t10);
			append(div8, t11);
			append(div8, div6);
			append(div8, t12);
			append(div8, div7);
			append(div9, t13);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div9, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$_*/ 2 && t0_value !== (t0_value = /*$_*/ ctx[1]("farmertable.asset.name") + "")) set_data(t0, t0_value);
			if (dirty & /*$_*/ 2 && t2_value !== (t2_value = /*$_*/ ctx[1]("farmertable.dex") + "")) set_data(t2, t2_value);
			if (dirty & /*$_*/ 2 && t4_value !== (t4_value = /*$_*/ ctx[1]("farmertable.weights") + "")) set_data(t4, t4_value);
			if (dirty & /*$_*/ 2 && t6_value !== (t6_value = /*$_*/ ctx[1]("farmertable.w.rewards") + "")) set_data(t6, t6_value);
			if (dirty & /*$_*/ 2 && t8_value !== (t8_value = /*$_*/ ctx[1]("farmertable.apr.unstable") + "")) set_data(t8, t8_value);
			if (dirty & /*$_*/ 2 && t10_value !== (t10_value = /*$_*/ ctx[1]("farmertable.liquidity") + "")) set_data(t10, t10_value);

			if (dirty & /*tokensSwapOut, $_, formatFiat, $farming*/ 7) {
				each_value = /*tokensSwapOut*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div9, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div10);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $_;
	let $farming;
	component_subscribe($$self, _, $$value => $$invalidate(1, $_ = $$value));
	component_subscribe($$self, farming, $$value => $$invalidate(2, $farming = $$value));

	window.addEventListener(
		"price-update",
		function (e) {
			console.log("price-update", e);

			tokensSwapOut.forEach(async pool => {
				if (pool.aprEnabled) {
					console.log("symbol", pool.symbol);

					try {
						if (pool.type === "UniswapV2") {
							await calculateAPRUniswap(pool.addressUniPoll, pool.addressTokenToStake, null, null, pool.containing[0].address, pool.containing[1].address);
						} else {
							await calculateAPRBalancer(pool.addressUniPoll, pool.addressTokenToStake, null, null, pool.containing[0].address, pool.containing[1].address);
						}
					} catch(e) {
						console.log("e", e);
					}
				}
			});
		},
		false
	);

	let tokensSwapOut;

	$: $$invalidate(0, tokensSwapOut = [
		{
			symbol: "CEPToken/ETH",
			address: "",
			addressTokenToStake: "0xFAE2809935233d4BfE8a56c2355c4A2e7d1fFf1A",
			addressUniPoll: "0x8314337d2b13e1A61EadF0FD1686b2134D43762F",
			balance: "0",
			weights: "80/20",
			aprEnabled: true,
			weeklyRewards: "110,000",
			poolLink: "https://pools.balancer.exchange/#/pool/0xfae2809935233d4bfe8a56c2355c4a2e7d1fff1a/",
			type: "Balancer",
			containing: [
				{
					symbol: "CEPToken",
					address: "0xad32A8e6220741182940c5aBF610bDE99E737b2D",
					balance: "0",
					icon: getTokenImage("0xad32A8e6220741182940c5aBF610bDE99E737b2D")
				},
				{
					symbol: "ETH",
					address: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
					balance: "0",
					icon: getTokenImage("eth")
				}
			]
		},
		{
			symbol: "DEFI+S/ETH",
			address: "",
			aprEnabled: true,
			balance: "0",
			weights: "70/30",
			addressTokenToStake: "0x35333CF3Db8e334384EC6D2ea446DA6e445701dF",
			addressUniPoll: "0x220f25C2105a65425913FE0CF38e7699E3992B97",
			weeklyRewards: "20,000",
			poolLink: "https://pools.balancer.exchange/#/pool/0x35333cf3db8e334384ec6d2ea446da6e445701df/",
			type: "Balancer",
			containing: [
				{
					symbol: "DEFI+S",
					address: "0xad6a626ae2b43dcb1b39430ce496d2fa0365ba9c",
					balance: "0",
					icon: getTokenImage("0xad6a626ae2b43dcb1b39430ce496d2fa0365ba9c")
				},
				{
					symbol: "ETH",
					address: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
					balance: "0",
					icon: getTokenImage("eth")
				}
			]
		},
		{
			symbol: "DEFI+L/ETH",
			address: "",
			aprEnabled: true,
			balance: "0",
			weights: "70/30",
			contractType: "Geyser",
			addressTokenToStake: "0xa795600590a7da0057469049ab8f1284baed977e",
			addressUniPoll: "0xb3c2b0056627cc1dc148d8fc29f5abdf4dd837bc",
			weeklyRewards: "20,000",
			poolLink: "https://pools.balancer.exchange/#/pool/0xa795600590a7da0057469049ab8f1284baed977e/",
			type: "Balancer",
			containing: [
				{
					symbol: "DEFI+L",
					address: "0x78f225869c08d478c34e5f645d07a87d3fe8eb78",
					balance: "0",
					icon: getTokenImage("0x78f225869c08d478c34e5f645d07a87d3fe8eb78")
				},
				{
					symbol: "ETH",
					address: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
					balance: "0",
					icon: getTokenImage("eth")
				}
			]
		},
		{
			symbol: "DEFI+S/DAI",
			address: "",
			aprEnabled: true,
			deprecated: true,
			addressTokenToStake: "0x7aeFaF3ea1b465dd01561B0548c9FD969e3F76BA",
			addressUniPoll: "0x64964cb69f40A1B56AF76e32Eb5BF2e2E52a747c",
			weights: "50/50",
			type: "UniswapV2",
			poolLink: "https://app.uniswap.org/#/add/0x6B175474E89094C44Da98b954EedeAC495271d0F/0xaD6A626aE2B43DCb1B39430Ce496d2FA0365BA9C",
			weeklyRewards: "deprecated",
			balance: "0",
			containing: [
				{
					symbol: "DEFI+S",
					address: "0xad6a626ae2b43dcb1b39430ce496d2fa0365ba9c",
					balance: "0",
					icon: getTokenImage("0xad6a626ae2b43dcb1b39430ce496d2fa0365ba9c")
				},
				{
					symbol: "DAI",
					address: "0x6B175474E89094C44Da98b954EedeAC495271d0F",
					balance: "0",
					icon: getTokenImage("0x6B175474E89094C44Da98b954EedeAC495271d0F")
				}
			]
		}
	]);

	return [tokensSwapOut, $_, $farming];
}

class FarmerTable extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default FarmerTable;