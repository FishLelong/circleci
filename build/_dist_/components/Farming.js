/* src/components/Farming.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { _ } from "../../web_modules/svelte-i18n.js";
import images from "../config/images.json.proxy.js";
import pools from "../config/pools.json.proxy.js";

function create_fragment(ctx) {
	let div2;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let h2;
	let t1_value = /*$_*/ ctx[0]("defi.liquidity.mining") + "";
	let t1;
	let t2;
	let div1;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			h2 = element("h2");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");

			div1.innerHTML = `<a href="#/stake"><h1 class="text-lg md:text-xl">Stake</h1> 
        <span class="text-xs">To get CEPToken Rewards</span></a>`;

			attr(img, "class", "h-40px md:h-70px");
			if (img.src !== (img_src_value = images.logos.piedao_clean)) attr(img, "src", img_src_value);
			attr(img, "alt", "PieDAO logo");
			attr(h2, "class", "text-sm md:text-lg");
			attr(div0, "class", "left");
			attr(div1, "class", "right");
			attr(div2, "class", "farming-container");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, img);
			append(div0, t0);
			append(div0, h2);
			append(h2, t1);
			append(div2, t2);
			append(div2, div1);
		},
		p(ctx, [dirty]) {
			if (dirty & /*$_*/ 1 && t1_value !== (t1_value = /*$_*/ ctx[0]("defi.liquidity.mining") + "")) set_data(t1, t1_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

let rewards = "00.0%"; // TODO: Get this from docs markdown
let brand = "piedao";
let symbol = "$BAL";

function instance($$self, $$props, $$invalidate) {
	let $_;
	component_subscribe($$self, _, $$value => $$invalidate(0, $_ = $$value));
	let { token } = $$props;

	$$self.$$set = $$props => {
		if ("token" in $$props) $$invalidate(1, token = $$props.token);
	};

	return [$_, token];
}

class Farming extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { token: 1 });
	}
}

export default Farming;