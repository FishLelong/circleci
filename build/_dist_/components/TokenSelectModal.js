/* src/components/TokenSelectModal.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { _ } from "../../web_modules/svelte-i18n.js";
import images from "../config/images.json.proxy.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (30:0) {#if open}
function create_if_block(ctx) {
	let div2;
	let div0;
	let h3;
	let t0_value = /*$_*/ ctx[4]("pool.select.token") + "";
	let t0;
	let t1;
	let button;
	let img;
	let img_src_value;
	let t2;
	let div1;
	let table;
	let thead;
	let tr;
	let th0;
	let t3_value = /*$_*/ ctx[4]("pool.token.name") + "";
	let t3;
	let t4;
	let th1;
	let t5_value = /*$_*/ ctx[4]("pool.balance") + "";
	let t5;
	let t6;
	let tbody;
	let clickOutside_action;
	let t7;
	let div3;
	let mounted;
	let dispose;
	let each_value = /*tokens*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			button = element("button");
			img = element("img");
			t2 = space();
			div1 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			t3 = text(t3_value);
			t4 = space();
			th1 = element("th");
			t5 = text(t5_value);
			t6 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div3 = element("div");
			attr(h3, "class", "text-md");
			if (img.src !== (img_src_value = images.icons.timesLight)) attr(img, "src", img_src_value);
			attr(img, "alt", "close");
			attr(img, "class", "w-8px");
			attr(button, "class", "ml-auto");
			attr(div0, "class", "top bg-grey-204 px-20px py-6px flex rounded-t-4px");
			attr(th0, "class", "font-thin w-50pc text-left py-10px");
			attr(th1, "class", "font-thin w-50pc text-right py-10px");
			attr(tr, "class", "border-grey-243 text-xs");
			attr(table, "class", "w-100pc");
			attr(div1, "class", "bottom rounded-b-4px");
			attr(div2, "class", "token-select-container bg-white fixed w-300px -ml-150px rounded-4px");
			attr(div3, "class", "overlay");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, h3);
			append(h3, t0);
			append(div0, t1);
			append(div0, button);
			append(button, img);
			append(div2, t2);
			append(div2, div1);
			append(div1, table);
			append(table, thead);
			append(thead, tr);
			append(tr, th0);
			append(th0, t3);
			append(tr, t4);
			append(tr, th1);
			append(th1, t5);
			append(table, t6);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			insert(target, t7, anchor);
			insert(target, div3, anchor);

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[5]),
					action_destroyer(clickOutside_action = /*clickOutside*/ ctx[3].call(null, div2)),
					listen(div2, "click_outside", /*click_outside_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$_*/ 16 && t0_value !== (t0_value = /*$_*/ ctx[4]("pool.select.token") + "")) set_data(t0, t0_value);
			if (dirty & /*$_*/ 16 && t3_value !== (t3_value = /*$_*/ ctx[4]("pool.token.name") + "")) set_data(t3, t3_value);
			if (dirty & /*$_*/ 16 && t5_value !== (t5_value = /*$_*/ ctx[4]("pool.balance") + "")) set_data(t5, t5_value);

			if (dirty & /*callback, tokens*/ 3) {
				each_value = /*tokens*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t7);
			if (detaching) detach(div3);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (50:16) {#if token.icon}
function create_if_block_1(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = /*token*/ ctx[8].icon)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*token*/ ctx[8].symbol);
			attr(img, "class", "token-icon w-24px h-24px my-4px mx-2px");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tokens*/ 2 && img.src !== (img_src_value = /*token*/ ctx[8].icon)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*tokens*/ 2 && img_alt_value !== (img_alt_value = /*token*/ ctx[8].symbol)) {
				attr(img, "alt", img_alt_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (47:10) {#each tokens as token}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0;
	let span;
	let t1_value = /*token*/ ctx[8].symbol + "";
	let t1;
	let t2;
	let td1;
	let t3_value = /*token*/ ctx[8].balance + "";
	let t3;
	let t4;
	let mounted;
	let dispose;
	let if_block = /*token*/ ctx[8].icon && create_if_block_1(ctx);

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[6](/*token*/ ctx[8], ...args);
	}

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			td1 = element("td");
			t3 = text(t3_value);
			t4 = space();
			attr(span, "class", "leading-32px pl-2 text-md");
			attr(td0, "class", "flex text-left py-4px");
			attr(td1, "class", "text-right py-4px text-md font-thin");
			attr(tr, "class", "border-grey-243 pointer");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			if (if_block) if_block.m(td0, null);
			append(td0, t0);
			append(td0, span);
			append(span, t1);
			append(tr, t2);
			append(tr, td1);
			append(td1, t3);
			append(tr, t4);

			if (!mounted) {
				dispose = listen(tr, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*token*/ ctx[8].icon) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(td0, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*tokens*/ 2 && t1_value !== (t1_value = /*token*/ ctx[8].symbol + "")) set_data(t1, t1_value);
			if (dirty & /*tokens*/ 2 && t3_value !== (t3_value = /*token*/ ctx[8].balance + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*open*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function clickOutside(node) {
	const handleClick = event => {
		if (node && !node.contains(event.target) && !event.defaultPrevented) {
			node.dispatchEvent(new CustomEvent("click_outside", node));
		}
	};

	document.addEventListener("click", handleClick, true);

	return {
		destroy() {
			document.removeEventListener("click", handleClick, true);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $_;
	component_subscribe($$self, _, $$value => $$invalidate(4, $_ = $$value));
	let { callback } = $$props;
	let { tokens } = $$props;
	let { open } = $$props;
	const click_handler = () => callback();
	const click_handler_1 = token => callback(token);
	const click_outside_handler = () => callback();

	$$self.$$set = $$props => {
		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
		if ("tokens" in $$props) $$invalidate(1, tokens = $$props.tokens);
		if ("open" in $$props) $$invalidate(2, open = $$props.open);
	};

	return [
		callback,
		tokens,
		open,
		clickOutside,
		$_,
		click_handler,
		click_handler_1,
		click_outside_handler
	];
}

class TokenSelectModal extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			callback: 0,
			tokens: 1,
			open: 2,
			clickOutside: 3
		});
	}

	get clickOutside() {
		return clickOutside;
	}
}

export default TokenSelectModal;