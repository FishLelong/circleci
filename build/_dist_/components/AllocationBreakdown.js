/* src/components/AllocationBreakdown.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	add_render_callback,
	add_resize_listener,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { _ } from "../../web_modules/svelte-i18n.js";
import { onMount } from "../../web_modules/svelte.js";
import AllocationChart from "./AllocationChart.js";
import poolsConfig from "../config/pools.json.proxy.js";
import { pools } from "../stores/eth.js";
import { amountFormatter, subscribeToPoolWeights } from "./helpers.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

// (48:8) {#each values as value}
function create_each_block(ctx) {
	let p;

	let t0_value = amountFormatter({
		amount: /*value*/ ctx[17].percentage,
		displayDecimals: 2
	}) + "";

	let t0;
	let t1;
	let t2_value = /*value*/ ctx[17].symbol + "";
	let t2;
	let t3;
	let p_style_value;

	return {
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = text("% ");
			t2 = text(t2_value);
			t3 = space();
			attr(p, "class", "label");
			attr(p, "style", p_style_value = /*bgColor*/ ctx[8](/*value*/ ctx[17]));
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
			append(p, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*values*/ 16 && t0_value !== (t0_value = amountFormatter({
				amount: /*value*/ ctx[17].percentage,
				displayDecimals: 2
			}) + "")) set_data(t0, t0_value);

			if (dirty & /*values*/ 16 && t2_value !== (t2_value = /*value*/ ctx[17].symbol + "")) set_data(t2, t2_value);

			if (dirty & /*values*/ 16 && p_style_value !== (p_style_value = /*bgColor*/ ctx[8](/*value*/ ctx[17]))) {
				attr(p, "style", p_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let h1;
	let t0_value = /*$_*/ ctx[7]("general.allocation") + "";
	let t0;
	let t1;
	let t2_value = /*$_*/ ctx[7]("general.breakdown") + "";
	let t2;
	let t3;
	let button;
	let t4;
	let t5;
	let div3;
	let div0;
	let allocationchart;
	let div0_resize_listener;
	let t6;
	let div2;
	let div1;
	let div1_resize_listener;
	let div2_resize_listener;
	let current;
	let mounted;
	let dispose;

	allocationchart = new AllocationChart({
			props: {
				height: /*leftHeight*/ ctx[5],
				width: /*leftWidth*/ ctx[0],
				margin: 20,
				values: /*values*/ ctx[4]
			}
		});

	let each_value = /*values*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div4 = element("div");
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			button = element("button");
			t4 = text(/*defaultAllocation*/ ctx[3]);
			t5 = space();
			div3 = element("div");
			div0 = element("div");
			create_component(allocationchart.$$.fragment);
			t6 = space();
			div2 = element("div");
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "left");
			add_render_callback(() => /*div0_elementresize_handler*/ ctx[11].call(div0));
			attr(div1, "class", "labels");
			attr(div1, "style", /*valuesStyle*/ ctx[6]);
			add_render_callback(() => /*div1_elementresize_handler*/ ctx[12].call(div1));
			attr(div2, "class", "right");
			add_render_callback(() => /*div2_elementresize_handler*/ ctx[13].call(div2));
			attr(div3, "class", "row");
			attr(div4, "class", "allocation-breakdown-container");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, h1);
			append(h1, t0);
			append(h1, t1);
			append(h1, t2);
			append(h1, t3);
			append(h1, button);
			append(button, t4);
			append(div4, t5);
			append(div4, div3);
			append(div3, div0);
			mount_component(allocationchart, div0, null);
			div0_resize_listener = add_resize_listener(div0, /*div0_elementresize_handler*/ ctx[11].bind(div0));
			append(div3, t6);
			append(div3, div2);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			div1_resize_listener = add_resize_listener(div1, /*div1_elementresize_handler*/ ctx[12].bind(div1));
			div2_resize_listener = add_resize_listener(div2, /*div2_elementresize_handler*/ ctx[13].bind(div2));
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[10]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$_*/ 128) && t0_value !== (t0_value = /*$_*/ ctx[7]("general.allocation") + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*$_*/ 128) && t2_value !== (t2_value = /*$_*/ ctx[7]("general.breakdown") + "")) set_data(t2, t2_value);
			if (!current || dirty & /*defaultAllocation*/ 8) set_data(t4, /*defaultAllocation*/ ctx[3]);
			const allocationchart_changes = {};
			if (dirty & /*leftHeight*/ 32) allocationchart_changes.height = /*leftHeight*/ ctx[5];
			if (dirty & /*leftWidth*/ 1) allocationchart_changes.width = /*leftWidth*/ ctx[0];
			if (dirty & /*values*/ 16) allocationchart_changes.values = /*values*/ ctx[4];
			allocationchart.$set(allocationchart_changes);

			if (dirty & /*bgColor, values, amountFormatter*/ 272) {
				each_value = /*values*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*valuesStyle*/ 64) {
				attr(div1, "style", /*valuesStyle*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(allocationchart.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(allocationchart.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_component(allocationchart);
			div0_resize_listener();
			destroy_each(each_blocks, detaching);
			div1_resize_listener();
			div2_resize_listener();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $pools;
	let $_;
	component_subscribe($$self, pools, $$value => $$invalidate(14, $pools = $$value));
	component_subscribe($$self, _, $$value => $$invalidate(7, $_ = $$value));
	let defaultAllocation = true;
	let { token } = $$props;
	let { leftWidth } = $$props;
	let { labelsHeight } = $$props;
	let { rightHeight } = $$props;
	let balanceKeys = [];
	let values = [];
	const bgColor = ({ color }) => `background-color: ${color};`;
	const click_handler = () => $$invalidate(3, defaultAllocation = !defaultAllocation);

	function div0_elementresize_handler() {
		leftWidth = this.offsetWidth;
		$$invalidate(0, leftWidth);
	}

	function div1_elementresize_handler() {
		labelsHeight = this.offsetHeight;
		$$invalidate(1, labelsHeight);
	}

	function div2_elementresize_handler() {
		rightHeight = this.offsetHeight;
		$$invalidate(2, rightHeight);
	}

	$$self.$$set = $$props => {
		if ("token" in $$props) $$invalidate(9, token = $$props.token);
		if ("leftWidth" in $$props) $$invalidate(0, leftWidth = $$props.leftWidth);
		if ("labelsHeight" in $$props) $$invalidate(1, labelsHeight = $$props.labelsHeight);
		if ("rightHeight" in $$props) $$invalidate(2, rightHeight = $$props.rightHeight);
	};

	let leftHeight;
	let valuesMarginTop;
	let valuesStyle;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*token, defaultAllocation, $pools*/ 16904) {
			//$: subscribeToPoolWeights(token);
			$: $$invalidate(4, values = ((useConfig, storeValues) => {
				if (useConfig) {
					return poolsConfig[token].composition;
				}

				return storeValues;
			})(defaultAllocation, $pools[token]));
		}

		if ($$self.$$.dirty & /*leftWidth*/ 1) {
			$: $$invalidate(5, leftHeight = leftWidth);
		}

		if ($$self.$$.dirty & /*rightHeight, labelsHeight*/ 6) {
			$: $$invalidate(15, valuesMarginTop = (rightHeight - labelsHeight) / 2);
		}

		if ($$self.$$.dirty & /*valuesMarginTop*/ 32768) {
			$: $$invalidate(6, valuesStyle = `margin-top: ${valuesMarginTop}px`);
		}
	};

	return [
		leftWidth,
		labelsHeight,
		rightHeight,
		defaultAllocation,
		values,
		leftHeight,
		valuesStyle,
		$_,
		bgColor,
		token,
		click_handler,
		div0_elementresize_handler,
		div1_elementresize_handler,
		div2_elementresize_handler
	];
}

class AllocationBreakdown extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			token: 9,
			leftWidth: 0,
			labelsHeight: 1,
			rightHeight: 2
		});
	}
}

export default AllocationBreakdown;