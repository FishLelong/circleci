/* src/App.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import "./styles.css.proxy.js";
import Footer from "./components/Footer.js";
import Header from "./components/Header.js";
import { currentRoute } from "./stores/routes.js";

function create_fragment(ctx) {
	let section;
	let header;
	let t0;
	let switch_instance;
	let t1;
	let footer;
	let current;
	header = new Header({});
	var switch_value = /*$currentRoute*/ ctx[0].page;

	function switch_props(ctx) {
		return {
			props: { params: /*$currentRoute*/ ctx[0].params }
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	footer = new Footer({});

	return {
		c() {
			section = element("section");
			create_component(header.$$.fragment);
			t0 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			create_component(footer.$$.fragment);
			attr(section, "id", "App");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			mount_component(header, section, null);
			append(section, t0);

			if (switch_instance) {
				mount_component(switch_instance, section, null);
			}

			append(section, t1);
			mount_component(footer, section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*$currentRoute*/ 1) switch_instance_changes.params = /*$currentRoute*/ ctx[0].params;

			if (switch_value !== (switch_value = /*$currentRoute*/ ctx[0].page)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, section, t1);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(header.$$.fragment, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_component(header);
			if (switch_instance) destroy_component(switch_instance);
			destroy_component(footer);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $currentRoute;
	component_subscribe($$self, currentRoute, $$value => $$invalidate(0, $currentRoute = $$value));
	return [$currentRoute];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;